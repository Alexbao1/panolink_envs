from dataclasses import dataclass

from diamond_miner.defaults import (
    DEFAULT_PREFIX_LEN_V4,
    DEFAULT_PREFIX_LEN_V6,
    UNIVERSE_SUBSET,
)
from diamond_miner.queries.fragments import cut_ipv6, date_time
from diamond_miner.queries.query import Query, StoragePolicy, link_rtt_inflation_table
from diamond_miner.typing import IPNetwork


@dataclass(frozen=True)
class CreateLinkRttInflationTable(Query):

    storage_policy: StoragePolicy = StoragePolicy()
    prefix_len_v4: int = DEFAULT_PREFIX_LEN_V4
    prefix_len_v6: int = DEFAULT_PREFIX_LEN_V6
    storage_policy: StoragePolicy = StoragePolicy()

    def statement(
        self, measurement_id: str, subset: IPNetwork = UNIVERSE_SUBSET
    ) -> str:
        assert subset == UNIVERSE_SUBSET, "subset not allowed for this query"
        return f"""
        CREATE TABLE IF NOT EXISTS {link_rtt_inflation_table(measurement_id)}
        (
            probe_dst_addr    IPv6,
            probe_src_port    UInt16,
            near_ttl          UInt8,
            far_ttl           UInt8,
            near_addr         IPv6,
            far_addr          IPv6,
            near_rtt          UInt16,
            far_rtt           UInt16,
            rtt_inflation     Int16,
            round             UInt16
        )
        ENGINE MergeTree
        ORDER BY (
            round, probe_dst_addr, probe_src_port, near_addr, far_addr
        )
        TTL {date_time(self.storage_policy.archive_on)} TO VOLUME '{self.storage_policy.archive_to}'
        SETTINGS storage_policy = '{self.storage_policy.name}'
        """
