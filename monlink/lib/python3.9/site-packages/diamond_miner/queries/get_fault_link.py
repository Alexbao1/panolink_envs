from dataclasses import dataclass

from diamond_miner.defaults import UNIVERSE_SUBSET
from diamond_miner.queries.query import ResultsQuery, link_rtt_inflation_table, fault_link_table
from diamond_miner.typing import IPNetwork
from dataclasses import field

@dataclass(frozen=True)
class GetFaultLink(ResultsQuery):
    round_: int = field(default=1)
    std_thresold: int = field(default=70)
    min_fault_round: int = field(default=10)
    def statement(
        self, measurement_id: str, subset: IPNetwork = UNIVERSE_SUBSET
    ) -> str:
        return f"""
        INSERT INTO {fault_link_table(measurement_id)}
        SELECT 
            probe_dst_addr,
            probe_src_port,
            near_addr,
            far_addr,
            near_ttl,
            far_ttl,
            {self.round_} AS round, 
            std_rtt_inflation
        FROM (
            SELECT 
                probe_dst_addr, 
                probe_src_port, 
                near_addr, 
                far_addr, 
                near_ttl, 
                far_ttl, 
                stddevPop(rtt_inflation) as std_rtt_inflation,
                stddevPop(far_rtt) as std_far_rtt,
                stddevPop(beyond_rtt) as std_beyond_rtt,
                count() as cnt
            FROM {link_rtt_inflation_table(measurement_id)}
            WHERE round<={self.round_} AND round+{self.min_fault_round} >= {self.round_}+1
            GROUP BY probe_dst_addr, probe_src_port, near_addr, far_addr, near_ttl, far_ttl
        )
        WHERE std_rtt_inflation > {self.std_thresold} and std_far_rtt > {self.std_thresold} and cnt>={self.min_fault_round}-3 and std_beyond_rtt > {self.std_thresold}
        """
