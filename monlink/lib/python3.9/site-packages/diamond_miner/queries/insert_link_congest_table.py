from dataclasses import dataclass

from diamond_miner.defaults import UNIVERSE_SUBSET
from diamond_miner.queries.query import Query, results_table, link_congest_table, conjest_table
from diamond_miner.typing import IPNetwork

from dataclasses import field

@dataclass(frozen=True)
class InsertLinkCongestTable(Query):

    round_: int = field(default=1)

    def statement(
        self, measurement_id: str, subset: IPNetwork = UNIVERSE_SUBSET
    ) -> str:
        return f"""
        INSERT INTO {link_congest_table(measurement_id)} 
        With 
        result AS (
            SELECT DISTINCT
                probe_dst_addr,
                probe_src_port,
                probe_ttl, 
                reply_src_addr
            FROM {results_table(measurement_id)}
            WHERE round={self.round_//10*10+1}
        )
        , link AS (
            SELECT 
                probe_dst_addr, 
                probe_src_port,
                r1.probe_ttl as near_ttl,
                r2.probe_ttl as far_ttl,
                r1.reply_src_addr as near_addr,
                r2.reply_src_addr as far_addr
            FROM result r1
            INNER JOIN result r2
            ON r1.probe_dst_addr = r2.probe_dst_addr AND r1.probe_src_port = r2.probe_src_port AND r1.probe_ttl = r2.probe_ttl-1    
        )
        , conjest AS (
            SELECT * FROM {conjest_table(measurement_id)}
            WHERE round={self.round_}
        )
        , link_conjest AS (
            SELECT 
                near_ttl, 
                near_addr,
                far_addr,
                length(groupArray((probe_dst_addr, probe_src_port))) as num_conjest_dsts
                
            FROM conjest
            LEFT JOIN link
            USING probe_dst_addr, probe_src_port
            GROUP BY near_ttl, near_addr, far_addr
        )
        , link_all AS (
            SELECT 
                near_ttl, 
                near_addr,
                far_addr,
                length(groupArray((probe_dst_addr, probe_src_port))) as num_dsts
            FROM link
            GROUP BY near_ttl, near_addr, far_addr
        )
        SELECT 
            near_ttl, 
            near_addr, 
            far_addr,
            num_conjest_dsts,
            num_dsts,
            {self.round_} as round
        FROM link_all
        LEFT JOIN link_conjest
        USING near_ttl, near_addr, far_addr
        """
