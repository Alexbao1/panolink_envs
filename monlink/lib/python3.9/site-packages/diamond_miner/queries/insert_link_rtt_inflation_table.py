from dataclasses import dataclass

from diamond_miner.defaults import UNIVERSE_SUBSET
from diamond_miner.queries.query import Query, results_table, link_rtt_inflation_table
from diamond_miner.typing import IPNetwork

from dataclasses import field

@dataclass(frozen=True)
class InsertLinkRttInflationTable(Query):

    round_: int = field(default=1)

    def statement(
        self, measurement_id: str, subset: IPNetwork = UNIVERSE_SUBSET
    ) -> str:
        return f"""
        INSERT INTO {link_rtt_inflation_table(measurement_id)}
        WITH 
        result AS (
            SELECT 
                probe_dst_addr,
                probe_src_port,
                probe_ttl, 
                reply_src_addr,
                CAST(median(rtt) as int) as rtt
            FROM {results_table(measurement_id)}
            WHERE round={self.round_}
            GROUP BY probe_dst_addr, probe_src_port, probe_ttl, reply_src_addr
        )
        SELECT
            probe_dst_addr,
            probe_src_port,
            near_ttl,
            far_ttl,
            near_addr,
            far_addr,
            near_rtt,
            far_rtt,
            rtt_inflation,
            r_beyond.rtt AS beyond_far_rtt,
            round
        FROM result r_beyond
        LEFT JOIN (
            SELECT 
                probe_dst_addr, 
                probe_src_port,
                r1.probe_ttl as near_ttl,
                r2.probe_ttl as far_ttl,
                r1.reply_src_addr as near_addr,
                r2.reply_src_addr as far_addr,
                r1.rtt as near_rtt,
                r2.rtt as far_rtt,
                r2.rtt - r1.rtt as rtt_inflation,
                {self.round_} as round
            FROM result r1
            INNER JOIN result r2
            ON r1.probe_dst_addr = r2.probe_dst_addr AND r1.probe_src_port = r2.probe_src_port AND r1.probe_ttl = r2.probe_ttl-1   
        ) r_cur
        ON r_cur.probe_dst_addr = r_beyond.probe_dst_addr AND r_cur.probe_src_port = r_beyond.probe_src_port AND r_cur.near_ttl+2 = r_beyond.probe_ttl
"""
