from dataclasses import dataclass

from diamond_miner.defaults import (
    DEFAULT_PREFIX_LEN_V4,
    DEFAULT_PREFIX_LEN_V6,
    UNIVERSE_SUBSET,
)
from diamond_miner.queries.fragments import cut_ipv6, date_time
from diamond_miner.queries.query import Query, StoragePolicy, rtt_std_table
from diamond_miner.typing import IPNetwork


@dataclass(frozen=True)
class CreateRttStdTable(Query):
    """Create the table used to store the measurement results from the prober."""

    SORTING_KEY = "probe_protocol, probe_src_addr, probe_dst_prefix, probe_dst_addr, probe_src_port, probe_dst_port, probe_ttl"

    prefix_len_v4: int = DEFAULT_PREFIX_LEN_V4
    prefix_len_v6: int = DEFAULT_PREFIX_LEN_V6
    storage_policy: StoragePolicy = StoragePolicy()

    def statement(
        self, measurement_id: str, subset: IPNetwork = UNIVERSE_SUBSET
    ) -> str:
        return f"""
        CREATE TABLE IF NOT EXISTS {rtt_std_table(measurement_id)}
        (
            probe_dst_addr         IPv6,
            probe_src_port         UInt16,
            probe_ttl              UInt8,
            rtt_std                UInt16 CODEC(T64, ZSTD(1)),
            round_test             UInt16       
        )
        ENGINE MergeTree
        ORDER BY (probe_dst_addr, probe_src_port, round_test)
        TTL {date_time(self.storage_policy.archive_on)} TO VOLUME '{self.storage_policy.archive_to}'
        SETTINGS storage_policy = '{self.storage_policy.name}'
        """
