import os
from dataclasses import dataclass
from pych_client import ClickHouseClient
from collections import defaultdict
from typing import Iterable, Iterator, Tuple
from ipaddress import ip_network, IPv6Network, IPv4Network
from diamond_miner.defaults import (
    DEFAULT_FAILURE_RATE,
    DEFAULT_PREFIX_LEN_V4,
    DEFAULT_PREFIX_LEN_V6,
    PROTOCOLS,
    UNIVERSE_SUBSET,
)
from diamond_miner.format import format_ipv6
from diamond_miner.generators.standalone import split_prefix
from diamond_miner.insert import InsertPreProbes,InsertByPreProbes
from diamond_miner.queries.query import Query, probes_table, asprobes_table, ttl_filtered_group_mapping, links_table, bgp_table
from diamond_miner.subsets import subsets_for
from diamond_miner.typing import IPNetwork
import time
import math
## TODO : rewrite this function using asprobes inner join group_mapping
def insert_as_probe(client: ClickHouseClient, 
                    measurement_id: str, 
                    candidates: dict,
                    round_: int,
                    prefix_len_v4: int = DEFAULT_PREFIX_LEN_V4,
                    prefix_len_v6: int = DEFAULT_PREFIX_LEN_V6,
                    change_round: int = 6):
    changeable_weight_query = f""
    if round_<=change_round:
        changeable_weight_query = f"""
            , link AS(
                SELECT toIPv6(arrayStringConcat(arraySlice(splitByChar('.', toString(probe_dst_addr)), 1, 3), '.') || '.0') AS probe_dst_prefix, near_ttl, far_ttl, near_addr, far_addr FROM {links_table(measurement_id)}
                WHERE gen_round={round_-1}
            )
            , dst_link AS (
                SELECT ip_asn, probe_dst_prefix, near_ttl, far_ttl, length(groupUniqArray((near_addr,far_addr))) as weight FROM link LEFT JOIN bgp USING probe_dst_prefix
                GROUP BY ip_asn, probe_dst_prefix, near_ttl, far_ttl
            )"""
    else:
        changeable_weight_query = f"""
            , link AS (
                SELECT arrayJoin(list_probe_dst_prefix) as probe_dst_prefix, near_ttl, far_ttl, sum(contribution) as weight FROM (
                    SELECT groupUniqArray(toIPv6(arrayStringConcat(arraySlice(splitByChar('.', toString(probe_dst_addr)), 1, 3), '.') || '.0')) AS list_probe_dst_prefix, near_ttl, far_ttl, near_addr, far_addr, 1/length(list_probe_dst_prefix) as contribution FROM {links_table(measurement_id)}
                    WHERE gen_round={round_-1}
                    GROUP BY near_ttl, far_ttl, near_addr, far_addr
                )
                GROUP BY probe_dst_prefix, near_ttl, far_ttl
            )
            , dst_link AS (
                SELECT ip_asn, probe_dst_prefix, near_ttl, far_ttl, sum(weight) as weight FROM link LEFT JOIN bgp USING probe_dst_prefix
                GROUP BY ip_asn, probe_dst_prefix, near_ttl, far_ttl
            )"""
    time.sleep(20)
    client.json(f"""
    INSERT INTO {probes_table(measurement_id)}
        WITH 
        t1 AS (
            SELECT probe_protocol, group_id, ip_asn, probe_ttl, cumulative_probes, round  
            FROM {asprobes_table(measurement_id)} as asp
            INNER JOIN {ttl_filtered_group_mapping(measurement_id)} as gr 
            USING group_id
            WHERE round = {round_}  AND probe_ttl<=gr.valid_ttl_range.2 AND probe_ttl>=gr.valid_ttl_range.1 AND cumulative_probes>0
        )
        , t2 AS (
            WITH
            bgp AS (SELECT toIPv6(toString(prefix)) AS probe_dst_prefix, ip_asn FROM {bgp_table(measurement_id)} )
            {changeable_weight_query}
            , tmp1 AS (
                SELECT group_id, ip_asn, near_ttl, far_ttl, probe_dst_prefix, weight
                FROM dst_link INNER JOIN {ttl_filtered_group_mapping(measurement_id)} USING ip_asn
                WHERE valid_ttl_range.1<=near_ttl AND valid_ttl_range.2>near_ttl
            )
            , tmp2 AS (
                SELECT group_id, near_ttl, far_ttl, sum(weight) AS total FROM tmp1
                GROUP BY group_id, near_ttl, far_ttl
            )
            , tmp3 AS (
            SELECT *,weight/total as proportion FROM tmp1 LEFT JOIN tmp2 USING group_id, near_ttl, far_ttl
            )
            SELECT ip_asn, group_id, arrayJoin([near_ttl, far_ttl]) as probe_ttl, probe_dst_prefix, max(proportion) as proportion FROM tmp3
            GROUP BY ip_asn, group_id, probe_ttl, probe_dst_prefix
        )
        SELECT probe_protocol, probe_dst_prefix, probe_ttl, sum(ceil(cumulative_probes*proportion)) as cumulative_probes, round 
        FROM t1 LEFT JOIN t2 USING group_id, ip_asn, probe_ttl
        GROUP BY probe_dst_prefix, probe_ttl, probe_protocol, round        
    """)
